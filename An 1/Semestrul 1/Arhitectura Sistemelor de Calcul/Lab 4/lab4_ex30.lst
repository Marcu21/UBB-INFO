     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 32B9                        A dw 1011_1001_0011_0010b
    14 00000002 00000000                    B dd 0
    15 00000006 255800                      format db "%X", 0
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 66A1[00000000]                  mov ax, [A]
    20 00000006 6683F00A                        xor ax, 0Ah
    21 0000000A 66D1E8                          shr ax, 1
    22 0000000D BB00000000                      mov ebx, 0
    23 00000012 88C3                            mov bl, al
    24 00000014 66C1CB04                        ror bx, 4
    25 00000018 66A1[00000000]                  mov ax, [A]
    26 0000001E 66C1E807                        shr ax, 7 ; 0000_0001_0111_0010b
    27 00000022 88C3                            mov bl, al
    28 00000024 66C1C304                        rol bx, 4 ; 0000_0111_0010_comp
    29 00000028 B900000000                      mov ecx, 0
    30 0000002D 66B90000                        mov cx, 0
    31 00000031 66A1[00000000]                  mov ax, [A] ;1011_1001_0011_0010b
    32 00000037 66C1E803                        shr ax, 3; 0001_0111_0010_0110
    33 0000003B 6683F0FF                        xor ax, 1111_1111_1111_1111b
    34 0000003F 88C5                            mov ch, al
    35 00000041 C0E502                          shl ch, 2
    36 00000044 6681C9F003                      or cx, 0000_0011_1111_0000b
    37 00000049 66890D[02000000]                mov word [B], cx ;1111_1111_1111_0000
    38 00000050 66891D[04000000]                mov word [B+2], bx ;0000_0111_0010_comp
    39                                          ;0000_0111_0010_comp_1111_1111_1111_0000
    40 00000057 FF35[02000000]                  push dword [B]
    41 0000005D 68[06000000]                    push dword format
    42 00000062 FF15[00000000]                  call [printf]
    43 00000068 83C408                          add esp, 4*2
    44                                          
    45                                          ; exit(0)
    46 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
