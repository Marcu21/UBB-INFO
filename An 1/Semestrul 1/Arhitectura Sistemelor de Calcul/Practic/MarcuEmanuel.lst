     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fclose, fread, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 696E7075742E747874-         nume_fisier db "input.txt", 0
    16 00000009 00                 
    17 0000000A 7200                        mod_acces db "r", 0
    18 0000000C FFFFFFFF                    descriptor_fisier dd -1
    19 00000010 00000000                    caracter dd 0
    20 00000014 00000000                    numar dd 0
    21 00000018 257300                      format_string db "%s", 0
    22 0000001B 256300                      format_caracter db "%c", 0
    23 0000001E 256400                      format_numar db "%d", 0
    24                                      len equ 100
    25 00000021 00<rept>                    text times len db 0
    26 00000085 00000000                    contor dd 0
    27 00000089 4E756D6172756C2064-         mesaj_negativ db "Numarul de aparitii al caracterului %c citit nu este egal cu numarul %d citit.", 0
    27 00000092 652061706172697469-
    27 0000009B 6920616C2063617261-
    27 000000A4 63746572756C756920-
    27 000000AD 256320636974697420-
    27 000000B6 6E7520657374652065-
    27 000000BF 67616C206375206E75-
    27 000000C8 6D6172756C20256420-
    27 000000D1 63697469742E00     
    28 000000D8 4E756D6172756C2064-         mesaj_afirmativ db "Numarul de aparitii al caracterului %c citit este egal cu numarul %d citit.", 0
    28 000000E1 652061706172697469-
    28 000000EA 6920616C2063617261-
    28 000000F3 63746572756C756920-
    28 000000FC 256320636974697420-
    28 00000105 65737465206567616C-
    28 0000010E 206375206E756D6172-
    28 00000117 756C20256420636974-
    28 00000120 69742E00           
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 FD                              std
    33 00000001 68[00000000]                    push dword nume_fisier
    34 00000006 68[18000000]                    push dword format_string
    35 0000000B FF15[00000000]                  call [scanf]
    36 00000011 83C408                          add esp, 4*2
    37 00000014 FD                              std
    38 00000015 68[10000000]                    push dword caracter
    39 0000001A 68[1B000000]                    push dword format_caracter
    40 0000001F FF15[00000000]                  call [scanf]
    41 00000025 83C408                          add esp, 4*2
    42 00000028 FD                              std
    43 00000029 68[14000000]                    push dword numar
    44 0000002E 68[1E000000]                    push dword format_numar
    45 00000033 FF15[00000000]                  call [scanf]
    46 00000039 83C408                          add esp, 4*2
    47                                          
    48                                          
    49 0000003C 68[0A000000]                    push dword mod_acces
    50 00000041 68[00000000]                    push dword nume_fisier
    51 00000046 FF15[00000000]                  call [fopen]
    52 0000004C 83C408                          add esp, 4*2
    53                                          
    54 0000004F A3[0C000000]                    mov [descriptor_fisier], eax
    55 00000054 83F800                          cmp eax, 0
    56 00000057 747F                            je final
    57                                          
    58 00000059 FF35[0C000000]                  push dword [descriptor_fisier]
    59 0000005F 6A64                            push dword len
    60 00000061 6A01                            push dword 1
    61 00000063 68[21000000]                    push dword text
    62 00000068 FF15[00000000]                  call [fread]
    63 0000006E 83C410                          add esp, 4*4
    64                                          
    65 00000071 B964000000                      mov ecx, len
    66 00000076 BE[21000000]                    mov esi, text
    67                                          repeta:
    68 0000007B B800000000                          mov eax, 0
    69 00000080 8A06                                mov al, byte [esi]
    70 00000082 3B05[10000000]                      cmp eax, [caracter]
    71 00000088 7506                                jne nu
    72 0000008A FF05[85000000]                      inc dword [contor]
    73                                              nu:
    74 00000090 46                                  inc esi
    75 00000091 E2E8                                loop repeta
    76                                          
    77                                          ;push dword [contor]
    78                                          ;push dword format_numar
    79                                          ;call [printf]
    80                                          ;add esp, 4*2
    81                                          
    82 00000093 A1[85000000]                    mov eax, dword [contor]
    83 00000098 8B1D[14000000]                  mov ebx, dword [numar]
    84 0000009E 39D8                            cmp eax, ebx
    85 000000A0 751C                            jne negativ
    86                                          
    87                                          ;push dword [numar]
    88                                          ;push dword [caracter]
    89                                          ;mov eax, dword [contor]
    90                                          ;cmp eax, ebx
    91                                          ;je aici
    92                                          ;push dword mesaj_negativ
    93                                          ;aici:
    94                                          ;push dword mesaj_afirmativ
    95                                          ;call [printf]
    96                                          ;add esp, 4*3
    97                                          
    98 000000A2 FF35[14000000]                  push dword [numar]
    99 000000A8 FF35[10000000]                  push dword [caracter]
   100 000000AE 68[D8000000]                    push dword mesaj_afirmativ
   101 000000B3 FF15[00000000]                  call [printf]
   102 000000B9 83C40C                          add esp, 4*3
   103 000000BC EB1A                            jmp final
   104                                          
   105                                          negativ:
   106 000000BE FF35[14000000]                  push dword [numar]
   107 000000C4 FF35[10000000]                  push dword [caracter]
   108 000000CA 68[89000000]                    push dword mesaj_negativ
   109 000000CF FF15[00000000]                  call [printf]
   110 000000D5 83C40C                          add esp, 4*3
   111                                      final:
   112 000000D8 FF35[0C000000]                  push dword [descriptor_fisier]
   113 000000DE FF15[00000000]                  call [fclose]
   114 000000E4 83C404                          add esp, 4
   115                                          ; exit(0)
   116 000000E7 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   117 000000E9 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
