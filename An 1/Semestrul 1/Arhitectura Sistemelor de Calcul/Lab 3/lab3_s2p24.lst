     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Interpretare cu semn
    14 00000000 FE                          a db -2
    15 00000001 0400                        b dw 4
    16 00000003 01000000                    c dd 1
    17 00000007 0400000000000000            d dq 4
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; (a + b + c) - d + (b - c) = (-2+4+1)-4+(4-1)=3-4+3=2
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 6698                            cbw ;ax=a
    25 00000007 668B1D[01000000]                mov bx, [b]
    26 0000000E 6601D8                          add ax, bx
    27 00000011 6699                            cwd ;dx:ax=a+b
    28 00000013 668B1D[03000000]                mov bx, word [c]
    29 0000001A 668B0D[05000000]                mov cx, word [c+2]
    30 00000021 6652                            push dx
    31 00000023 6650                            push ax
    32 00000025 58                              pop eax
    33 00000026 6651                            push cx
    34 00000028 6653                            push bx
    35 0000002A 5B                              pop ebx
    36 0000002B 01D8                            add eax, ebx ;eax=a+b+c
    37 0000002D 99                              cdq ; edx:eax=a+b+c 
    38 0000002E 8B1D[07000000]                  mov ebx, dword [d]
    39 00000034 8B0D[0B000000]                  mov ecx, dword [d+4]
    40 0000003A 29D8                            sub eax, ebx
    41 0000003C 19CA                            sbb edx, ecx ; edx:eax=(a+b+c)-d 
    42 0000003E 52                              push edx
    43 0000003F 50                              push eax
    44 00000040 66A1[01000000]                  mov ax, [b]
    45 00000046 6699                            cwd ; dx:ax=b
    46 00000048 668B1D[03000000]                mov bx, word [c]
    47 0000004F 668B0D[05000000]                mov cx, word [c+2]
    48 00000056 6629D8                          sub ax, bx 
    49 00000059 6619CA                          sbb dx, cx ;dx:ax=b-c 
    50 0000005C 6652                            push dx
    51 0000005E 6650                            push ax
    52 00000060 5B                              pop ebx
    53 00000061 58                              pop eax
    54 00000062 5A                              pop edx
    55 00000063 01D8                            add eax, ebx
    56 00000065 83D200                          adc edx, 0
    57                                          
    58                                      
    59                                          ; exit(0)
    60 00000068 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000006A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
