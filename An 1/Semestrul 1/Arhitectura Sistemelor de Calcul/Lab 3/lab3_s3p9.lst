     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b-byte; c-word; e-doubleword; x-qword Interpetare fara semn
    14 00000000 01                          a db 1
    15 00000001 01                          b db 1
    16 00000002 0200                        c dw 2
    17 00000004 0A000000                    e dd 10
    18 00000008 0500000000000000            x dq 5
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; (a-b+c*128)/(a+b)+e-x=(1-1+2*128)/(1+1)+10-5=133
    25 00000000 A0[00000000]                    mov al, [a]
    26 00000005 8A1D[01000000]                  mov bl, [b]
    27 0000000B 28D8                            sub al, bl ;al=a-b
    28 0000000D 88C3                            mov bl, al ;bl=a-b
    29 0000000F 66A1[02000000]                  mov ax, [c]
    30 00000015 66B98000                        mov cx, 128
    31 00000019 66F7E1                          mul cx ;ax=c*128 
    32 0000001C B700                            mov bh,0
    33 0000001E 6601D8                          add ax, bx ;ax=(a-b+c*128)
    34 00000021 8A1D[00000000]                  mov bl, [a]
    35 00000027 8A0D[01000000]                  mov cl, [b]
    36 0000002D 00CB                            add bl, cl ;bl=a+b
    37 0000002F F6F3                            div bl ;al=(a-b+c*128)/(a+b)
    38 00000031 B400                            mov ah, 0
    39 00000033 66BA0000                        mov dx, 0
    40 00000037 668B1D[04000000]                mov bx, word [e]
    41 0000003E 668B0D[06000000]                mov cx, word [e+2]
    42 00000045 6652                            push dx
    43 00000047 6650                            push ax
    44 00000049 58                              pop eax
    45 0000004A 6651                            push cx
    46 0000004C 6653                            push bx
    47 0000004E 5B                              pop ebx
    48 0000004F 01D8                            add eax, ebx ;eax=(a-b+c*128)/(a+b)+e
    49 00000051 BA00000000                      mov edx, 0
    50 00000056 8B1D[08000000]                  mov ebx, dword [x]
    51 0000005C 8B0D[0C000000]                  mov ecx, dword [x+4]
    52 00000062 29D8                            sub eax, ebx
    53 00000064 19CA                            sbb edx, ecx 
    54                                          
    55                                          
    56                                      
    57                                          ; exit(0)
    58 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
