     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00000000                    n dd 0
    14 00000004 00000000                    m dd 0
    15 00000008 73756D61203D202558-         message db "suma = %Xh, diferenta = %Xh", 0
    15 00000011 682C20646966657265-
    15 0000001A 6E7461203D20255868-
    15 00000023 00                 
    16 00000024 255800                      format  db "%X", 0
    17 00000027 255800                      format2  db "%X", 0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 68[00000000]                    push dword n
    23 00000005 68[24000000]                    push dword format 
    24 0000000A FF15[00000000]                  call [scanf]
    25 00000010 83C408                          add esp, 4*2
    26 00000013 68[04000000]                    push dword m
    27 00000018 68[27000000]                    push dword format2
    28 0000001D FF15[00000000]                  call [scanf]
    29 00000023 83C408                          add esp, 4*2
    30 00000026 A1[00000000]                    mov eax, [n]
    31 0000002B 8B1D[04000000]                  mov ebx, [m]
    32 00000031 25FFFF0000                      and eax, 0xFFFF
    33 00000036 81E3FFFF0000                    and ebx, 0xFFFF
    34 0000003C 01D8                            add eax, ebx
    35 0000003E 89C1                            mov ecx, eax
    36 00000040 A1[00000000]                    mov eax, [n]
    37 00000045 8B1D[04000000]                  mov ebx, [m]
    38 0000004B C1E810                          shr eax, 16
    39 0000004E C1EB10                          shr ebx, 16
    40 00000051 29D8                            sub eax, ebx
    41 00000053 50                              push eax
    42 00000054 51                              push ecx
    43 00000055 68[08000000]                    push dword message
    44 0000005A FF15[00000000]                  call [printf]
    45                                      
    46                                          ; exit(0)
    47 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
