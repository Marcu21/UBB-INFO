        -:    0:Source:C:/Users/emanu/CLionProjects/oop_lab5_marcus/repo.c
        -:    0:Graph:C:\Users\emanu\CLionProjects\oop_lab5_marcus\cmake-build-debug-coverage\CMakeFiles\oop_lab5_marcus.dir\repo.c.gcno
        -:    0:Data:C:\Users\emanu\CLionProjects\oop_lab5_marcus\cmake-build-debug-coverage\CMakeFiles\oop_lab5_marcus.dir\repo.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "repo.h"
        -:    4:#include <string.h>
        -:    5:
function creeaza_vid called 8 returned 100% blocks executed 100%
        8:    6:MateriiPrime* creeaza_vid()
        -:    7:{
        8:    8:    MateriiPrime* materii_prime = malloc(sizeof(MateriiPrime));
        8:    9:    materii_prime->capacity = 1;
        8:   10:    materii_prime->array = malloc(sizeof(MateriePrima)*materii_prime->capacity);
        8:   11:    materii_prime->used = 0;
        8:   12:    return materii_prime;
        8:   12-block  0
        -:   13:}
        -:   14:
function copy_list called 1 returned 100% blocks executed 100%
        1:   15:MateriiPrime* copy_list(MateriiPrime* materii_prime)
        -:   16:{
        1:   17:    MateriiPrime* rez = creeaza_vid();
        1:   17-block  0
call    0 returned 1
        3:   18:    for (int i = 0; i < materii_prime->used; i++)
        3:   18-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:   19:    {
        2:   20:        ElemType m = materii_prime->array[i];
        2:   21:        adauga_materie_prima(rez, copy_materie(m));
        2:   21-block  0
call    0 returned 2
call    1 returned 2
        -:   22:    }
        1:   23:    return rez;
        1:   23-block  0
        -:   24:}
        -:   25:
        -:   26:
function adauga_materie_prima called 11 returned 100% blocks executed 100%
       11:   27:void adauga_materie_prima(MateriiPrime* materii_destinatie, ElemType materii_sursa)
        -:   28:{
       11:   29:    if (materii_destinatie->used + 1 >= materii_destinatie->capacity)
       11:   29-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
        -:   30:    {
       20:   31:        while (materii_destinatie->used + 1 >= materii_destinatie->capacity)
       10:   31-block  0
       20:   31-block  1
branch  0 taken 10
branch  1 taken 10 (fallthrough)
        -:   32:        {
       10:   33:            materii_destinatie->capacity *= 2;
       10:   33-block  0
        -:   34:        }
       10:   35:        materii_destinatie->array = realloc(materii_destinatie->array, sizeof(ElemType) * materii_destinatie->capacity);
       10:   35-block  0
        -:   36:    }
        -:   37:
       11:   38:    materii_destinatie->array[materii_destinatie->used++] = materii_sursa;
       11:   39:}
        -:   40:
        -:   41:
function modifica_materie_prima called 2 returned 100% blocks executed 100%
        2:   42:void modifica_materie_prima(MateriiPrime* materii_prime, int index_modificare, MateriePrima materie_noua)
        -:   43:{
        -:   44:
        2:   45:    ((MateriePrima*)materii_prime->array[index_modificare])->cantitate = materie_noua.cantitate;
        2:   46:    strcpy(((MateriePrima*)materii_prime->array[index_modificare])->producator, materie_noua.producator);
        2:   47:    strcpy(((MateriePrima*)materii_prime->array[index_modificare])->nume, materie_noua.nume);
        2:   48:}
        -:   49:
        -:   50:
        -:   51:
function sterge_materie_prima called 3 returned 100% blocks executed 100%
        3:   52:void sterge_materie_prima(MateriiPrime* materii_prime, int index_stergere){
        3:   53:    MateriePrima* to_be_freed = materii_prime->array[index_stergere];
        5:   54:    for (int i = index_stergere; i < materii_prime->used-1; i++)
        3:   54-block  0
        5:   54-block  1
branch  0 taken 2
branch  1 taken 3 (fallthrough)
        -:   55:    {
        2:   56:        materii_prime->array[i] = materii_prime->array[i+1];
        2:   56-block  0
        -:   57:    }
        3:   58:    materii_prime->used--;
        3:   59:    distruge_materie_prima(to_be_freed);
        3:   59-block  0
call    0 returned 3
        3:   60:}
        -:   61:
function distruge_lista_materii called 2 returned 100% blocks executed 100%
        2:   62:void distruge_lista_materii(MateriiPrime* materii_prime){
        2:   63:    distruge_materii_prime(materii_prime, (DestroyFunction)distruge_materie_prima);
        2:   63-block  0
call    0 returned 2
        2:   64:}
        -:   65:
function distruge_materii_prime called 6 returned 100% blocks executed 100%
        6:   66:void distruge_materii_prime(MateriiPrime* materii_prime, DestroyFunction destrF)
        -:   67:{
       14:   68:    for (int i = 0; i < materii_prime->used; i++)
        6:   68-block  0
       14:   68-block  1
branch  0 taken 8
branch  1 taken 6 (fallthrough)
        -:   69:    {
        8:   70:        ElemType m = materii_prime->array[i];
        8:   71:        destrF(m);
        8:   71-block  0
call    0 returned 8
        -:   72:    }
        6:   73:    free(materii_prime->array);
        6:   74:    free(materii_prime);
        6:   75:}
        -:   76:/*
        -:   77:void delete_last_element(MateriiPrime* undoL) {
        -:   78:    if (undoL->used == 1) {
        -:   79:        printf("The undoL list is empty!\n");
        -:   80:        return;
        -:   81:    }
        -:   82:
        -:   83:    // Free the memory associated with the last element
        -:   84:    distruge_lista_materii(undoL->array[undoL->used - 1]);
        -:   85:
        -:   86:    // Decrement the 'used' variable to indicate removal of the last element
        -:   87:    undoL->used--;
        -:   88:}
        -:   89:
        -:   90:*/
