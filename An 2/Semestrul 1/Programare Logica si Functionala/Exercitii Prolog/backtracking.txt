Dandu-se o lista formata din numere intregi, sa se genereze in PROLOG lista submultimilor cu cel putin N elemente avand 
suma divizibila cu 3. Se vor scrie modelele matematice si modelele de flux pentru predicatele folosite.
ex: L = [2,3,4] si N = 1 => [[3],[2,4],[2,3,4]] (nu neaparat in aceasta ordine)

combinari_cond([H|_], 1, S, [H]):- S1 is S + H, S1 mod 3 =:= 0.
combinari_cond([_|T], K, S, R):- combinari_cond(T, K, S, R).
combinari_cond([H|T], K, S, [H|R]):- K1 is K - 1, S1 is S + H, combinari_cond(T, K1, S1, R).

subm(L, K, N, S, R):- K >= N, combinari_cond(L, K, S, R).
subm(L, K, N, S, R):- K > N, K1 is K - 1, subm(L, K1, N, S, R).

main(L, N, R):- length(L, K), findall(SUB, subm(L, K, N, 0, SUB), R).








II. Chairs must be arranged for a show. There are red chairs and yellow chairs. One row contains 5 chairs. 
Find all the possible arrangements of chairs on a row, knowing that there can be at most 3 yellow chairs in a row. 
Write the mathematical model, flow model, and the meaning of all variables for each predicate used. 
Some elements in the solution: ['Y', 'R', 'R', 'R', 'R'], ['R', 'Y', 'Y', 'R', 'Y'], ['R', 'Y', 'R', 'Y', 'Y'], etc.

r = 5 y = 0 => r r r r r
r = 4 y = 1 => r r r r y
r = 3 y = 2 => r r r y y
r = 2 y = 3 => r r y y y


inserare([], E, [E]).
inserare([H|T], E, [E, H|T]).
inserare([H|T], E, [H|R]):- inserare(T, E, R).

permutari([], []).
permutari([H|T], R):- permutari(T, PERM), inserare(PERM, H, R).

combinari_cond([H|_], 1, _, YEL, [H]):- (YEL =< 3, H = 'R' ; YEL < 3, H = 'Y').
combinari_cond([_|T], K, RED, YEL, R):-  combinari_cond(T, K, RED, YEL, R).
combinari_cond([H|T], K, RED, YEL, [H|R]):- K1 is K - 1, H = 'R', RED1 is RED + 1, combinari_cond(T, K1, RED1, YEL, R).
combinari_cond([H|T], K, RED, YEL, [H|R]):- K1 is K - 1, H = 'Y', YEL < 3, YEL1 is YEL + 1, combinari_cond(T, K1, RED, YEL1, R).

aranjamente(L, K, RED, YEL, R):- combinari_cond(L, K, RED, YEL, COMB), permutari(COMB, R).

main(L, R):- findall(ARR, aranjamente(L, 5, 0, 0, ARR), R).








Să se scrie un program PROLOG care generează lista submulţimilor de sumă  S dată, cu elementele unei liste, astfel încât
numărul elementelor pare din submulțime să fie par. Exemplu- pentru lista [1, 2, 3, 4, 5, 6, 10] şi S=10 ⇒ [[1,2,3,4], [4,6]].
								
%								    1. [l1], daca k = 1, s = k si (p e par, h impar sau p e impar, h par) 
%combinari_cond(l1...ln, k, p, s) = 2. combinari_cond(l2...ln, k, s)
%								    3. l1 + combinari_cond(l2...ln, k-1, s-l1), daca s - l1 >= 0
								 
%combinari_cond(L: list, K: int, S: int, P: int, R: list)

combinari_cond([H|_], 1, H, P, [H]) :- (P mod 2 =:= 0, H mod 2 =:= 1 ; P mod 2 =:= 1, H mod 2 =:= 0).
combinari_cond([_|T], K, S, P, R):- combinari_cond(T, K, S, P, R).
combinari_cond([H|T], K, S, P, [H|R]):- DIF is S - H, DIF >= 0, P1 is P + abs(H mod 2 -1), K1 is K - 1, combinari_cond(T, K1, DIF, P1, R).

%subm(l, k, s, p) = 1. combinari_cond(l, k, s, p), daca k > 0
%				    2. subm(l, k-1, s, p), daca k > 1

%subm(L: list, K: int, S: int, P: int, R: list)

subm(L, K, S, P, R):- K > 0, combinari_cond(L, K, S, P, R).
subm(L, K, S, P, R):- K > 1, K1 is K - 1, subm(L, K1, S, P, R).

main(L, S, R):- length(L, K), findall(SUB, subm(L, K, S, 0, SUB), R).








toate submultimile cu valori intre [a,b] cu numar par de elemente pare si numar impar de elemente impare

genereaza(A, A, [A]).
genereaza(A, B, [A|R]):- A =< B, A1 is A + 1, genereaza(A1, B, R).

combinari_cond([H|_], 1, P, I, [H]):- (P \= 0, I \= 0, P mod 2 =:= 0, I mod 2 =:= 0, H mod 2 =:= 1 ; P \= 0, I \= 0, P mod 2 =:= 1, I mod 2 =:= 1, H mod 2 =:= 0).
combinari_cond([_|T], K, P, I, R):- combinari_cond(T, K, P, I, R).
combinari_cond([H|T], K, P, I, [H|R]):- K1 is K - 1, P1 is P + abs(H mod 2 -1), I1 is I + H mod 2, combinari_cond(T, K1, P1, I1, R).

subm(L, K, P, I, R):- K > 0, combinari_cond(L, K, P, I, R).
subm(L, K, P, I, R):- K > 1, K1 is K - 1, subm(L, K1, P, I, R).

main(A, B, R):- genereaza(A, B, L), length(L, K), findall(SUB, subm(L, K, 0, 0, SUB), R).






submultimi k elemente toate numere impare in progresie aritmetica.
ex: L = [1,5,2,9,3], k = 3 => [[1,5,9],[1,3,5]]

progresie([_]).
progresie([_,_]).
progresie([A,B,C|T]):- B - A =:= C - B, progresie([B,C|T]).

combinari([H|_], 1, Acc, [H]):- H mod 2 =:= 1, progresie([H|Acc]).
combinari([_|T], K, Acc, R):- combinari(T, K, Acc, R).
combinari([H|T], K, Acc, [H|R]):- H mod 2 =:= 1, progresie([H|Acc]), K1 is K - 1, combinari(T, K1, [H|Acc], R).

inserare([], E, [E]).
inserare([H|T], E, [E,H|T]):- E =< H.
inserare([H|T], E, [H|R]):- E > H, inserare(T, E, R).

sortare([], []).
sortare([H|T], R):- sortare(T, R1), inserare(R1, H, R).

main(L, K, R):- sortare(L, L1), findall(COMB, combinari(L1, K, [], COMB), R).




